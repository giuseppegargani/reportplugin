/* APPUNTI MISTI:
    1 - Caricare un plugin da flatDir:
        https://stackoverflow.com/questions/54918583/using-gradle-plugin-from-flatdir-source
    2 - Fare riferimento ad un singolo artifact
        https://stackoverflow.com/questions/51794696/how-can-i-download-and-reference-a-single-artifact-in-gradle
        IMPORTANTE DA LEGGERE MILLE VOLTE!!!!
    3 - MAVEN-PUBLISH-PLUGIN: E' il plugin di base per pubblicare!!!
        https://docs.gradle.org/current/userguide/publishing_maven.html
    4 - PAGINA DI INFORMAZIONI DA JITPACK
        https://jitpack.io/docs/BUILDING/
    5 - AGGIUNTA DI UN CUSTOM ARTIFACT:
        https://docs.gradle.org/current/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven
    6 - Scaricare e riferirsi a singoli artifact:
        https://stackoverflow.com/questions/51794696/how-can-i-download-and-reference-a-single-artifact-in-gradle
    7 - ARTIFACTS MULTIPLI E DI TIPO DIVERSO!!! dentro il plugin
        https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-sources-jar
    8 - MAVENPUBLICATION
        https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
    9 - MODIFICARE IMPOSTAZIONI RELATIVE AI METADATI!!! (escludere un Pom o altro)
        https://docs.gradle.org/current/userguide/declaring_repositories.html#sec:supported_metadata_sources
   10 - ARTIFACTS SENZA METADATA:
        https://discuss.gradle.org/t/how-to-fetch-maven-artifact-without-pom-file-in-gradle-6-0/33836
        https://docs.gradle.org/current/userguide/declaring_repositories.html#sec:supported_metadata_sources
   11 - SCARICARE E UNZIPPARE:
        https://stackoverflow.com/questions/23023069/gradle-download-and-unzip-file-from-url
 */

plugins {
    id 'groovy'
    id 'java'
    id 'maven-publish'
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "1.0.0-rc-2"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}
//def myRpm = artifacts.add('archives', file("prova.txt"))

/*task sourceJar(type: Jar) {
//archiveFileName = "beppe.jar"
//from sourceSets.main.allJava
from "$buildDir\\prova.txt"
//archiveClassifier = "sources"
}*/

//def rpmFile = file("$buildDir/../prova.txt")
//def rpmArtifact = artifacts.add('archives', rpmFile.get().asFile) {
//    type 'jar'
//    builtBy 'jar'
//}

//step 1: creare Jar (di tipo jar)
task sourceJar(type: Jar) {
    if(file("$buildDir/../prova.txt").exists()) {println("IL FILE ESISTE")} else {println("il file non esiste")}
    archiveFileName = "beppe.jar"
    destinationDirectory = file("$buildDir/..")
    from "$buildDir/../prova.txt"
    //archiveClassifier = "sources"
}

//step 2: Verifica esistenza file con Layout builddirectory
task verpath(){
    doLast {
        //def customfile = layout.buildDirectory.file("../beppe.jar")
        def customfile = layout.buildDirectory.dir("./")
        if(file("$buildDir/../beppe.jar").exists()) { println("IL FILE RICHIESTO ESISTE")}else {println("IL FILE RICHIESTO NON ESISTE")}
    }
}

//step 3: assegna ad canfiguration "archives"
def myRpm = artifacts.add('archives', file("$buildDir/../beppe.jar"))

//build.finalizedBy(sourceJar)

//step 4: crea artifact
/*tasks.register('verifica') {
    doLast {
        //def destinationDirector = layout.buildDirectory.dir('../')
        if(file("$buildDir/../prova.txt").exists()) {println("IL FILE ESISTE")} else {println("il file non esiste")}
        if(layout.buildDirectory.file('rpms/my-package.rpm'))
        //def destinationDirector = buildDir
        //println("eccomi $destinationDirector")
        //if(file("${destinationDirector}/prova.txt").exists()) {println("IL FILE ESISTE")} else {println("il file non esiste")}
    }
}*/

build.dependsOn(sourceJar)
publish.dependsOn(sourceJar)

publishing {
    publications {
        pub(MavenPublication) {
            artifact myRpm
            //artifact sourceJar
            //artifact rpmArtifact
            artifactId "documenti"
            //from components.java

            /*pom {
                name = 'My Library'
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                properties = [
                        myProp: "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'johnd'
                        name = 'John Doe'
                        email = 'john.doe@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }*/
            groupId 'com.github.giuseppegargani'
            version '0.14'


            repositories {
                maven {
                    url = 'https://jitpack.io'
                }
            }
        }
    }
}